/* Generated By:JavaCC: Do not edit this line. QueryParser.java */
package de.mpg.escidoc.services.pubman.searching;
import java.util.*;
import java.io.*;

/**
 * This class is generated by JavaCC.  The most important method is
 * {@link #parse()}.
 *
 * Usage example:
 *  QueryParser parser = new QueryParser("my query to parse");
 *  String cqlQuery = parser.parse();
 *	
 * To enrich the cql query with indexes use {@link #addCQLIndex()} before parsing.
 * 
 * @author Miriam Doelle 
 *
 */
public class QueryParser implements QueryParserConstants {

  /**
   * Creates a new instance with the given string.
   */
  public QueryParser(String query)
  {
        this(new StringReader(query));
  }

  /** 
   *  Parses a query string, returning a CQL query string.
   *
   *  @param query  the query string to be parsed.
   *  @throws ParseException if the parsing fails
   */
  public String parse(String query) throws ParseException
  {
    ReInit(new StringReader(query));

    try {
       matchQuery();
      return getCQLQuery();
    }
    catch (ParseException tme) {
      // rethrow to include the original query:
      throw new ParseException("Cannot parse '" +query+ "': " + tme.getMessage());
    }
    catch (TokenMgrError tme) {
      throw new ParseException("Cannot parse '" +query+ "': " + tme.getMessage());
    }
  }

  /** 
   *  Parses a query, returning a CQL query string.
   *
   *  @param query  the query string to be parsed.
   *  @throws ParseException if the parsing fails
   */
  public String parse() throws ParseException
  {

    try {
       matchQuery();
      return getCQLQuery();
    }
    catch (ParseException tme) {
      // rethrow to include the original query:
      throw new ParseException("Cannot parse query: " + tme.getMessage());
    }
    catch (TokenMgrError tme) {
      throw new ParseException("Cannot parse query: " + tme.getMessage());
    }

  }

  /**
   * The resulting cql query.
   */
  private String cqlQuery = "";

  /**
   * The list of cql indexes.
   */
  private List<String>cqlIndexList = new ArrayList<String>();

  /**
   * Returns the created cql query.
   */
  public String getCQLQuery()
  {
    return cqlQuery;
  }

  /**
   * Adds a cql index to the list.
   */
  public void addCQLIndex(String index)
  {
    cqlIndexList.add(index);
  }

  /**
   * Returns the list of cql indexes.
   */
  public List<String>getCQLIndexList()
  {
    return cqlIndexList;
  }

  /**
   * Helper to add cql indexes to a searchToken.
   */
  private String makeCQLIdexedSearchToken(String searchToken)
  {
        StringBuffer result = new StringBuffer();

    switch (cqlIndexList.size()) {
    case 0:
        return searchToken;
    case 1:
        return  result.append(cqlIndexList.get(0)).append("=").append(searchToken).toString();
    default:
        // enclose in brackets
        result.append("(");
        for (int i = 0; i < cqlIndexList.size(); i++)
        {
           String index = cqlIndexList.get(i);

           if(i > 0)
           {
               // add or operation between indexed searchTokens
               result.append(" or ");
           }

           result.append(index).append("=").append(searchToken);
        }
        result.append(")");
        return result.toString();

    }
  }

  final public void matchQuery() throws ParseException {
 String s;
    s = searchString();
                cqlQuery = s;
    jj_consume_token(0);
  }

  final public String searchString() throws ParseException {
        String s;
        StringBuffer result = new StringBuffer();
    label_1:
    while (true) {
      s = expression();
                if( result.length() > 0)
                {
                        result.append(" and ").append(s);
                }
                else {
                        result.append(s);
                }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case QUOTED:
      case SPECIAL:
      case CONSTANT:
      case 10:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
    }
                {if (true) return result.toString();}
    throw new Error("Missing return statement in function");
  }

  final public String expression() throws ParseException {
        String e1;
        String e2 = "";
        StringBuffer result = new StringBuffer();
    e1 = searchClause();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AND:
    case OR:
    case NOT:
      e2 = booleanClause();
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
                result.append(e1);
                if(!e2.equals(""))
                {
                        result.append(" ").append(e2);
                }
                {if (true) return result.toString();}
    throw new Error("Missing return statement in function");
  }

  final public String searchClause() throws ParseException {
        String s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case QUOTED:
    case SPECIAL:
    case CONSTANT:
      s = searchToken();
                {if (true) return s;}
      break;
    case 10:
      jj_consume_token(10);
      s = searchString();
      jj_consume_token(11);
                {if (true) return "("+ s+ ")";}
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String searchToken() throws ParseException {
        Token t;
        String s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case QUOTED:
    case CONSTANT:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONSTANT:
        t = jj_consume_token(CONSTANT);
        break;
      case QUOTED:
        t = phrase();
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                t.image=makeCQLIdexedSearchToken(t.image);
                {if (true) return t.image;}
      break;
    case SPECIAL:
      s = escaped();
                s=makeCQLIdexedSearchToken(s);
                {if (true) return s;}
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String escaped() throws ParseException {
        Token t;
    t = jj_consume_token(SPECIAL);
                {if (true) return ( "\\"+t.image.toString()+"");}
    throw new Error("Missing return statement in function");
  }

  final public Token phrase() throws ParseException {
        Token t;
    t = jj_consume_token(QUOTED);
                {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public String booleanClause() throws ParseException {
        String s;
        Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AND:
      t = jj_consume_token(AND);
      break;
    case OR:
      t = jj_consume_token(OR);
      break;
    case NOT:
      t = jj_consume_token(NOT);
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    s = expression();
                {if (true) return  t.image.toLowerCase()+" "+s;}
    throw new Error("Missing return statement in function");
  }

  public QueryParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[6];
  static private int[] jj_la1_0;
  static {
      jj_la1_0();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x780,0x70,0x780,0x280,0x380,0x70,};
   }

  public QueryParser(java.io.InputStream stream) {
     this(stream, null);
  }
  public QueryParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new QueryParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  public QueryParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new QueryParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  public QueryParser(QueryParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  public void ReInit(QueryParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector<int[]> jj_expentries = new java.util.Vector<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[12];
    for (int i = 0; i < 12; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 6; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 12; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

}
